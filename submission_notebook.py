{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":94771,"databundleVersionId":13044405,"sourceType":"competition"},{"sourceId":12907971,"sourceType":"datasetVersion","datasetId":8167469}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-08-29T16:57:23.293648Z\",\"iopub.execute_input\":\"2025-08-29T16:57:23.294119Z\",\"iopub.status.idle\":\"2025-08-29T16:57:23.313791Z\",\"shell.execute_reply.started\":\"2025-08-29T16:57:23.294093Z\",\"shell.execute_reply\":\"2025-08-29T16:57:23.312463Z\"},\"jupyter\":{\"outputs_hidden\":true}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-08-29T17:00:43.272184Z\",\"iopub.execute_input\":\"2025-08-29T17:00:43.272532Z\",\"iopub.status.idle\":\"2025-08-29T17:00:54.533668Z\",\"shell.execute_reply.started\":\"2025-08-29T17:00:43.272508Z\",\"shell.execute_reply\":\"2025-08-29T17:00:54.532966Z\"}}\nimport joblib\nimport json\nimport os\n\nMODEL_PATH = \"/kaggle/input/results/models\"\nFEATURES_PATH = f\"/kaggle/input/results/top_features.json\"\n\n# Load top features\nwith open(FEATURES_PATH, \"r\") as f:\n    top_features = json.load(f)\n\n# Load models\nmodels = {}\nfor target in range(424):   # adjust to however many targets you trained\n    models[f\"target_{target}\"] = joblib.load(f\"{MODEL_PATH}/model_target_{target}.pkl\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-08-29T17:01:01.209279Z\",\"iopub.execute_input\":\"2025-08-29T17:01:01.209933Z\"}}\nimport os\nimport pandas as pd\nimport polars as pl\nimport kaggle_evaluation.mitsui_inference_server\n\n\nNUM_TARGET_COLUMNS = 424\n\n\ndef predict(\n    test: pl.DataFrame,\n    label_lags_1_batch: pl.DataFrame,\n    label_lags_2_batch: pl.DataFrame,\n    label_lags_3_batch: pl.DataFrame,\n    label_lags_4_batch: pl.DataFrame,\n) -> pl.DataFrame | pd.DataFrame:\n    # Convert Polars â†’ Pandas\n    test_df = test.to_pandas()\n\n    # Select only top features\n    test_df = test_df[top_features]\n\n    preds = {}\n    for target, model in models.items():\n        preds[target] = model.predict(test_df)[0]   # predict one step\n\n    predictions = pd.DataFrame([preds])\n    return predictions\ninference_server = kaggle_evaluation.mitsui_inference_server.MitsuiInferenceServer(predict)\n\nif os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n    inference_server.serve()\nelse:\n    inference_server.run_local_gateway(('/kaggle/input/mitsui-commodity-prediction-challenge/',))","metadata":{"_uuid":"610ff788-f2c0-457d-a407-2db1b1a6798b","_cell_guid":"b8f28ca1-3a2e-4993-aad9-68f64d2ac29a","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}